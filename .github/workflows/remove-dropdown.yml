name: Replace Header and Remove Duplicate Styles

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  replace-and-clean:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1Ô∏è‚É£ Replace the first <header>...</header> block with contents of header.html
      - name: Replace <header> block with header.html content (once per file)
        run: |
          echo "üîÑ Replacing <header>...</header> with header.html content..."
          for file in $(find . -type f -name "*.html"); do
            if grep -q "<header" "$file"; then
              # Only replace the FIRST <header>...</header> block
              awk -v rfile="header.html" '
                BEGIN { replaced = 0; while ((getline line < rfile) > 0) headerContent = headerContent line "\n"; close(rfile); }
                {
                  if (!replaced && match($0, /<header[^>]*>/)) {
                    print headerContent;
                    inHeader = 1;
                    replaced = 1;
                    next;
                  }
                  if (inHeader && match($0, /<\/header>/)) {
                    inHeader = 0;
                    next;
                  }
                  if (!inHeader) print $0;
                }
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
              echo "::notice file=$file::Header replaced."
            fi
          done
          echo "‚úÖ Header replacement complete."

      # 2Ô∏è‚É£ Commit the header replacement
      - name: Commit and push header replacements
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git diff --cached --quiet && echo "No header changes to commit." || (
            git commit -m "üîÑ Replace <header> with header.html contents (once per file)"
            git push
          )

      # 3Ô∏è‚É£ Remove duplicate dropdown styles (same logic you wrote)
      - name: Find and Clean ROBUST Duplicate Styles (Flexible Match)
        id: cleanup_step_robust
        run: |
          set -e
          TOTAL_REMOVED=0
          echo "üßπ Starting flexible duplicate cleanup..."

          find . -name "*.html" -type f -print0 | while IFS= read -r -d '' HTML_FILE; do
            perl -0777 -pe '
              BEGIN { our %seen; our $removed = 0; }

              s{
                (<style\b[^>]*>.*?</style>)
              }{
                my $block = $1;
                my $norm = $block;
                $norm =~ s/\s+/ /g;

                if ($norm =~ /\.dropdown\s*\{.*?display:\s*inline-block;.*?\}\s*\.dropdown-content/s) {
                  my $sig = "dropdown_signature";
                  if (!$seen{$sig}++) {
                    $block
                  } else {
                    $removed++;
                    ""
                  }
                } else {
                  $block
                }
              }egsx;

              END { print STDERR "::notice ::Removed $removed duplicate dropdown style block(s)\n"; }
            ' "$HTML_FILE" > "$HTML_FILE.tmp"

            if ! cmp -s "$HTML_FILE" "$HTML_FILE.tmp"; then
              mv "$HTML_FILE.tmp" "$HTML_FILE"
              echo "::notice file=${HTML_FILE}::Processed and cleaned."
              TOTAL_REMOVED=1
            else
              rm -f "$HTML_FILE.tmp"
            fi
          done

          echo "total_removed=${TOTAL_REMOVED}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Cleanup complete."

      # 4Ô∏è‚É£ Commit and push cleanup changes
      - name: Commit and push cleanup
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No cleanup changes to commit."
          else
            git commit -m "üßπ Auto-clean duplicate dropdown styles after header replacement"
            git push
          fi
      # 5Ô∏è‚É£ Remove excessive blank lines and hidden whitespace (robust + timeout + safe continue)
      - name: Remove excessive blank lines (>4) and hidden characters
        run: |
          echo "üßΩ Removing long blank line streaks and hidden whitespace..."
          set +e  # continue even if a file fails or times out

          find . -type f -name "*.html" -print0 | while IFS= read -r -d '' FILE; do
            echo "üîß Attempting to edit: $FILE"
            SIZE=$(stat -c%s "$FILE" || echo "unknown")
            echo "   ‚îî‚îÄ Size: ${SIZE} bytes"

            # Run Perl with a 10-second timeout
            timeout 10s perl -CSD -0777 -pe '
              # Normalize all line endings
              s/\r\n/\n/g;
              s/\r/\n/g;

              # Convert Unicode separators to newline
              s/\x{2028}/\n/g;
              s/\x{2029}/\n/g;

              # Remove zero-width and BOM characters
              s/\x{200B}//g;
              s/\x{FEFF}//g;

              # Convert non-breaking spaces to normal space
              s/\x{00A0}/ /g;

              # Remove empty HTML comments that appear as "blank" lines (e.g. <!---->, <!--   -->)
              s/^\s*<!--\s*-->\s*\n?//gm;
              s/^\s*<!-+>\s*\n?//gm;

              # Remove lines that contain only spaces or tabs (NBSPs already converted)
              s/^[ \t]*\n/\n/gm;

              # Collapse any long run of newlines (5 or more) into a single newline
              s/\n{5,}/\n/g;
            ' "$FILE" > "$FILE.tmp"
            EXITCODE=$?

            # Handle timeout (exit code 124)
            if [ $EXITCODE -eq 124 ]; then
              echo "‚ö†Ô∏è  File $FILE canceled ‚Äî took more than 10 seconds (timeout). Skipped."
              rm -f "$FILE.tmp"
              continue
            elif [ $EXITCODE -ne 0 ]; then
              echo "‚ùå Error occurred while editing $FILE (exit code $EXITCODE). Skipped."
              rm -f "$FILE.tmp"
              continue
            fi

            # Normal completion ‚Äî check if file changed
            if ! cmp -s "$FILE" "$FILE.tmp"; then
              mv "$FILE.tmp" "$FILE"
              echo "‚úÖ Edited: $FILE"
            else
              rm -f "$FILE.tmp"
              echo "‚ÑπÔ∏è  No changes needed: $FILE"
            fi
          done

          echo "‚úÖ Blank line & hidden whitespace cleanup complete."



      # 6Ô∏è‚É£ Commit and push blank line removal changes
      - name: Commit and push blank line cleanup
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No blank line cleanup changes to commit."
          else
            git commit -m "üßΩ Remove excessive blank lines from HTML files"
            git push
          fi
      # 7Ô∏è‚É£ Remove duplicate <div class="notice"> blocks (keep first, detailed logs)
      - name: Remove duplicate notice bars
        run: |
          set +e
          echo "üßπ Starting duplicate <div class=\"notice\"> cleanup with detailed logs..."
          TOTAL_FILES=0
          TOTAL_DUPLICATES=0
          TOTAL_CHANGED=0

          find . -type f -name "*.html" -print0 | while IFS= read -r -d '' FILE; do
            ((TOTAL_FILES++))
            echo "üîç Checking: $FILE"

            perl -0777 -pe "
              BEGIN { our \$found = 0; our \$removed = 0; our \$log = \"\" }
              s{
                (<div\\s+class\\s*=\\s*[\"']notice[\"'][^>]*>.*?</div>)
              }{
                if (!\$found++) {
                  \$log .= '::debug ::Keeping first notice block\n';
                  \$1
                } else {
                  \$removed++;
                  \$log .= '::debug ::Removing duplicate notice block #' . \$removed . '\n';
                  ''
                }
              }egsx;
              END {
                print STDERR '::notice ::File processed. Found ' . \$found . ' notice block(s), removed ' . \$removed . '.\n';
                print STDERR \$log if \$removed;
              }
            " "$FILE" > "$FILE.tmp"

            if ! cmp -s "$FILE" "$FILE.tmp"; then
              mv "$FILE.tmp" "$FILE"
              ((TOTAL_DUPLICATES++))
              ((TOTAL_CHANGED++))
              echo "‚úÖ Cleaned $FILE ‚Äî duplicate notice(s) removed."
            else
              rm -f "$FILE.tmp"
              echo "‚ÑπÔ∏è  No duplicates found in $FILE"
            fi
          done

          echo "--------------------------------------------"
          echo "üßæ Summary:"
          echo "üìÅ Files checked: $TOTAL_FILES"
          echo "üóëÔ∏è  Files cleaned: $TOTAL_CHANGED"
          echo "‚ôªÔ∏è  Total duplicate notice blocks removed: $TOTAL_DUPLICATES"
          echo "‚úÖ Duplicate notice cleanup complete."



      # 8Ô∏è‚É£ Commit and push duplicate notice cleanup
      - name: Commit and push duplicate notice cleanup
        run: |
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üßæ Git status before commit:"
          git status --porcelain

          git add '*.html' || true

          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  No duplicate notice changes to commit."
            exit 0
          fi

          git commit -m "üßπ Remove duplicate <div class=\"notice\"> blocks (auto)"
          git pull --rebase origin "${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}" || true
          git push origin "HEAD:${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}"
      # 9Ô∏è‚É£ Remove duplicate <script>...</script> blocks that handle notice closing
      - name: Remove duplicate notice-close <script> blocks
        run: |
          echo "üßπ Starting duplicate <script> cleanup for notice-close handler..."
          set +e
          TOTAL_FILES=0
          TOTAL_CHANGED=0
          TOTAL_DUPLICATES=0

          find . -type f -name "*.html" -print0 | while IFS= read -r -d '' FILE; do
            ((TOTAL_FILES++))
            echo "üîç Checking: $FILE"

            perl -0777 -pe '
              BEGIN { our $found = 0; our $removed = 0 }

              # Simple pattern ‚Äî matches any <script> ... close-notice ... </script>
              s{
                (<script>[\s\S]*?close-notice[\s\S]*?</script>)
              }{
                if (!$found++) { $1 } else { $removed++; "" }
              }egsx;

              END { print STDERR "::notice ::File processed. Found $found close-notice script(s), removed $removed.\n"; }
            ' "$FILE" > "$FILE.tmp"

            if [ $? -ne 0 ]; then
              echo "‚ùå Perl regex error in $FILE"
              rm -f "$FILE.tmp"
              continue
            fi

            if ! cmp -s "$FILE" "$FILE.tmp"; then
              mv "$FILE.tmp" "$FILE"
              ((TOTAL_CHANGED++))
              ((TOTAL_DUPLICATES++))
              echo "‚úÖ Cleaned $FILE ‚Äî duplicate close-notice script(s) removed."
            else
              rm -f "$FILE.tmp"
              echo "‚ÑπÔ∏è  No duplicates found in $FILE"
            fi
          done

          echo "--------------------------------------------"
          echo "üßæ Summary:"
          echo "üìÅ Files checked: $TOTAL_FILES"
          echo "üóëÔ∏è  Files cleaned: $TOTAL_CHANGED"
          echo "‚ôªÔ∏è  Total duplicate scripts removed: $TOTAL_DUPLICATES"
          echo "‚úÖ Duplicate notice-close script cleanup complete."


      # üîü Commit and push duplicate script cleanup
      - name: Commit and push duplicate notice-close script cleanup
        run: |
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üßæ Git status before commit:"
          git status --porcelain

          git add '*.html' || true

          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  No duplicate notice-close script changes to commit."
            exit 0
          fi

          git commit -m "üßπ Remove duplicate notice-close <script> blocks (auto)"
          git pull --rebase origin "${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}" || true
          git push origin "HEAD:${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}"

      # 1Ô∏è‚É£1Ô∏è‚É£ Remove duplicate .notice <style> blocks
      - name: Remove duplicate notice style <style> blocks
        run: |
          echo "üßπ Starting duplicate <style> cleanup for .notice blocks..."
          set +e
          TOTAL_FILES=0
          TOTAL_CHANGED=0
          TOTAL_DUPLICATES=0

          find . -type f -name "*.html" -print0 | while IFS= read -r -d '' FILE; do
            ((TOTAL_FILES++))
            echo "üîç Checking: $FILE"

            perl -0777 -pe '
              BEGIN { our $found = 0; our $removed = 0 }

              # Match <style> blocks containing ".notice {" to the closing </style>
              s{
                (<style>[\s\S]*?\.notice\s*\{[\s\S]*?</style>)
              }{
                if (!$found++) { $1 } else { $removed++; "" }
              }egsx;

              END { print STDERR "::notice ::File processed. Found $found notice style block(s), removed $removed.\n"; }
            ' "$FILE" > "$FILE.tmp"

            if [ $? -ne 0 ]; then
              echo "‚ùå Perl regex error in $FILE"
              rm -f "$FILE.tmp"
              continue
            fi

            if ! cmp -s "$FILE" "$FILE.tmp"; then
              mv "$FILE.tmp" "$FILE"
              ((TOTAL_CHANGED++))
              ((TOTAL_DUPLICATES++))
              echo "‚úÖ Cleaned $FILE ‚Äî duplicate .notice style(s) removed."
            else
              rm -f "$FILE.tmp"
              echo "‚ÑπÔ∏è  No duplicate styles found in $FILE"
            fi
          done

          echo "--------------------------------------------"
          echo "üßæ Summary:"
          echo "üìÅ Files checked: $TOTAL_FILES"
          echo "üóëÔ∏è  Files cleaned: $TOTAL_CHANGED"
          echo "‚ôªÔ∏è  Total duplicate .notice styles removed: $TOTAL_DUPLICATES"
          echo "‚úÖ Duplicate notice-style cleanup complete."


      # 1Ô∏è‚É£2Ô∏è‚É£ Commit and push duplicate notice style cleanup
      - name: Commit and push duplicate notice style cleanup
        run: |
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üßæ Git status before commit:"
          git status --porcelain

          git add '*.html' || true

          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  No duplicate .notice style changes to commit."
            exit 0
          fi

          git commit -m "üßπ Remove duplicate .notice <style> blocks (auto)"
          git pull --rebase origin "${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}" || true
          git push origin "HEAD:${GITHUB_REF_NAME:-$GITHUB_HEAD_REF}"

