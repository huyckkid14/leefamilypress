name: Header Update and Style Cleanup

# Runs when you push code to main/master, or run it manually
on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  update-header:
    runs-on: ubuntu-latest
    # This prevents the job from being cancelled by the bot's own commits
    if: github.actor != 'github-actions[bot]'
    
    # THIS BLOCK PREVENTS AUTO-CANCELLATION BY OTHER PUSHES
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false # The key setting to ensure the job runs to completion
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Replace headers and clean styles (FINAL FIX)
        run: |
          # Set Git user/email
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # 1. Create a temporary file to hold the header content (Fixes Argument List Too Long)
          NEW_HEADER_FILE=$(mktemp)
          cat header.html > "$NEW_HEADER_FILE"

          # 2. Use 'find' and 'while' loop to process files one-by-one (Fixes Argument List Too Long)
          find . -type f -name "*.html" -print0 |
          while IFS= read -r -d '' file; do
            # Skip header.html itself
            if [ "$file" = "./header.html" ]; then continue; fi

            echo "Processing $file"

            # 3. The Perl command now uses a BEGIN block to read the header file
            perl -0777 -pi -e '
              # A. Read the header content from the temporary file BEFORE processing
              BEGIN { 
                # The path to the temporary file is safely injected here: '"$NEW_HEADER_FILE"'
                $new_header_content = do { local $/; open my $fh, "<", "'"$NEW_HEADER_FILE"'"; <$fh> };
                chomp($new_header_content);
              }

              # B. Remove ALL repeated style blocks (Fixes the large file size issue)
              s|<style\b[^>]*>\s*\.dropdown\b.*?<\/style>||gis;

              # C. Remove ALL old <header>...</header> blocks
              s|<header\b[^>]*>.*?</header>||gis;

              # D. Insert the NEW header content after the <body> tag
              if (s|(<body[^>]*>)|$1\n$new_header_content|i) {} 
            ' "$file"

            git add "$file"
          done

          # 4. Clean up the temporary header file
          rm "$NEW_HEADER_FILE"

          # 5. Commit and push changes
          git commit -m "Automated: Cleaned redundant styles and updated headers." || echo "No changes to commit"
          git push
